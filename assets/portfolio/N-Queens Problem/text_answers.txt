In Question 1: 
Because we are implementing a backtracking algorithm, we will restrict ourselves 
to positions which fill from the top of the board. We will insist then that the 
first k ≤ n positions be filled, i.e. non-zero, but the remaining n − k positions 
may be zeroes. So the partial solution:
(1 6 8 3 7 0 0 0)
should also have isLegalPosition return true, while the partial solution:
(1 6 8 3 5 0 0 0)
should have isLegalPosition return false. Why? Do you see an elegant way to check that?
--------

(1, 6, 8, 3, 5, 0, 0, 0) should return false. This is because the queen at (1, 1) threatens the queen at (5, 5).
I noticed that 1 and 5 are both in the "correct" spot in the array if the array was sorted. This means that they 
both must be on the center diagonal as array[i] == (i + 1), where i is the index of the array. I think we may be 
able to generalize this for any diagonal. In the array above, the distance between the first element and the 5th 
element is 4. The difference between the value of the first element and the value of the 5th element is also 4. 
I believe this will hold for any diagonal, but I'm not entirely sure about the generalization yet. If I'm correct
about this working for any negative diagonal (as in starting from top left and moving to bottom right), then it 
should also work for the positive diagonal. There will be a small difference though. When looking at the positive
diagonal, the numbers will be switched around. For example, if the first element in the array was 5 and the 5 
element was 1, then the difference between the two would still be 4, but the "distance" between the two would be 
-4. You can verify on a board that (1 X X X 5 X X X) and (5 X X X 1 X X X) are both illegal positions.

---------------------------------------------------------------------------------------

In Question 2:
Will the next legal position from a legal position always add a queen to the next rank? Why or why not?
--------

No, the next legal position from a legal position will not always add a queen to the next rank. One example is 
when a given legal position is a full solution. In that case, the next legal position will forcibly not add any
queens. 
For example, say we are given the legal position (1, 6, 8, 3, 7, 4, 2, 5). You can verify that this is in fact a
legal position. The next legal position after this is (1, 6, 8, 5, 0, 0, 0, 0) which removed four queens from the
board. When the current *legal* position is not a full solution, then yes, the next legal position will always add
a queen to the next rank.

---------------------------------------------------------------------------------------

In Question 3:
Is our solution to the 8-Queens problem the first one?
--------

No, our solution to the 8-Queens problem is not the first one. The first solution to the 8-Queens problem lexographically
is: {1, 5, 8, 6, 3, 7, 2, 4}.

---------------------------------------------------------------------------------------

In Question 4:
For parts 2-4, you can get some gains in efficiency by modifying the isLegalPosition method. We will build positions
from legal positions. This means that only the last queen, the last non-zero entry, can cause a position to be illegal.
Do you see? Why are you going to want increased efficiency?